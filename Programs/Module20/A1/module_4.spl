////////////Device Manager
alias functionNum R1;
alias currentPID R2;
if (functionNum == 2) then  // disk load
	alias pgnumber R3;
	alias bnumber R4;
	multipush (R1, R2, R3, R4);
	R1 = 3;  // acquire disk
	R2 = currentPID;
	call MOD_0;
	multipop (R1, R2, R3, R4);
	[DISK_STATUS_TABLE + 1] = 0;
	[DISK_STATUS_TABLE + 2] = pgnumber;
	[DISK_STATUS_TABLE + 3] = bnumber;
	load (pgnumber, bnumber);
	[PROCESS_TABLE + currentPID * 16 + 4] = WAIT_DISK;
	// invoking context switch module
	multipush (R1, R2, R3, R4);
	call MOD_5;
	multipop (R1, R2, R3, R4);	
endif;
if (functionNum == 3) then
	// subsequent code is to call acquire terminal
	multipush (R1, R2, R3);
	R1 = 8;
	R2 = currentPID;
	call MOD_0;
	multipop (R1, R2, R3);
	print R3;
	// subsequent code is to call release terminal
	multipush (R1, R2, R3);
	R1 = 9;
	R2 = currentPID;
	call MOD_0;
	multipop (R1, R2, R3);
	return;
endif;
if (functionNum == 4) then
	// subsequent code is to call acquire terminal
	multipush (R1, R2, R3);
	R1 = 8;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	multipop (R1, R2, R3);
	read;
	[PROCESS_TABLE + currentPID * 16 + 4] = WAIT_TERMINAL;
	// invoking context switch module
	multipush (R1, R2, R3);
	call MOD_5;
	multipop (R1, R2, R3);
	alias logicAddr R3;
	logicAddr = [PTBR + 2 * (logicAddr / 512)] * 512 + (logicAddr % 512);  // now has physical address
	[logicAddr] = [PROCESS_TABLE + currentPID * 16 + 8];
	return;
endif;
return;