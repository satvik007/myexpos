alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];  // obtaining the PID of the currently executing process
multipush (BP);

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;  //Note that instead of saving the actual value of KPTR, we are saving KPTR%512. This is because the OS design stipulates that KPTR must contain the offset of the kernel stack pointer within the User Area Page. This is done so as to allow the OS to relocate the User Area Page if necessary
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;
alias cnter R6;
cnter = 0;
alias found R7;
found = 0;
alias at R8;
alias newPID R2;
while (cnter <= 15) do
	at = ((currentPID + cnter + 1) % 16);
	if (at == 0) then
		cnter = cnter + 1;
		continue;
	endif;
	process_table_entry = PROCESS_TABLE + at * 16;
	if ([process_table_entry + 4] == READY || [process_table_entry + 4] == CREATED) then
		found = 1;
		newPID = at;
		break;
	endif;
	cnter = cnter + 1;
endwhile;
if (found == 0) then
	newPID = 0;
endif;
alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID * 16;

//Set back Kernel SP, PTBR , PTLR
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];
[SYSTEM_STATUS_TABLE + 1] = newPID;
// Our scheduler must distinguish between two cases when a process is scheduled for execution. If a process is in CREATED state, the process had never been scheduled for execution earlier. Such a process will have no "history" to remember, and thus no "user context" to be restored before being scheduled. On the other hand, a process in READY state is one which had been in RUNNING state in the past. Such a process will have an associated (saved user context) which the scheduler would have saved in the kernel stack when it was scheduled out earlier. This context has to be restored before the process is scheduled again for correct resumption of execution.
//Check if the newly found process is in CREATED state. If so, set SP to top of its user stack and return to user mode.
if([new_process_table + 4] == CREATED) then
	[new_process_table + 4] = RUNNING;
	SP = [new_process_table + 13];
	// the following line is the modification for stage 20. 
	BP = [[new_process_table + 11] * 512];
	[new_process_table + 9] = 0;
	ireturn;
endif;
//  In this stage, the only situation where the timer finds the next process in CREATED state is when the IDLE process is to be scheduled for the first time. Since INIT is scheduled directly from the OS startup code, the INIT process never goes through the CREATED state. 
[new_process_table + 4] = RUNNING;
multipop (BP);
return;